# m_matschiner Thu Mar 8 14:44:30 CET 2018

# Load modules.
module load ruby/2.1.5

# Define a function to sleep if too many jobs are queued or running.
function sleep_while_too_busy {
    n_jobs=`squeue -u michaelm | wc -l`
    while [ $n_jobs -gt 355 ]
    do
        sleep 10
        n_jobs=`squeue -u michaelm | wc -l`
    done
}

# Define a function to sleep while any jobs triggered by this script are queued or running.
function sleep_while_running {
    n_jobs=`squeue -u michaelm | grep wga | wc -l`
    while [ $n_jobs -gt 0 ]
    do
        sleep 10
        n_jobs=`squeue -u michaelm | grep wga | wc -l`
    done
}

# Define a function to print the time.
function print_time {
    END=$(date +%s)
    DIFF=$(( $END - $1 ))
    dd=$(echo "$DIFF/86400" | bc)
    dt2=$(echo "$DIFF-86400*$dd" | bc)
    dh=$(echo "$dt2/3600" | bc)
    dt3=$(echo "$dt2-3600*$dh" | bc)
    dm=$(echo "$dt3/60" | bc)
    ds=$(echo "$dt3-60*$dm" | bc)
    if [ $dd -gt 0 ]; then
        echo "done in ${dd} days and ${dh} hours."
    elif [ $dh -gt 0 ]; then
        echo "done in ${dh} hours and ${dm} minutes."
    elif [ $dm -gt 0 ]; then
        echo "done in ${dm} minutes and ${ds} seconds."
    else
        echo "done in ${ds} seconds."
    fi
}

# Make the log directory if it doesn't exist yet.
mkdir -p ../log/wga

# Check that the script collection by Jim Kent is in place, if not download it.
if [ ! -d ../bin/kent ]
then
    mkdir -p ../bin/kent
    cd ../bin/kent
    rsync -aP rsync://hgdownload.soe.ucsc.edu/genome/admin/exe/linux.x86_64/ ./
    cd -
fi

# Make 2bit versions of the scaffold version assemblies.
for species in ang jap mar meg obs
do
    if [ ! -f ../data/subjects/${species}.2bit ]
    then
        START=$(date +%s)
        echo -n "Converting the ${species} assembly to 2bit format..."
        ../bin/kent/faToTwoBit ../data/subjects/ang${species}.fasta ../data/subjects/${species}.2bit
        print_time ${START}
    fi
done

# Split the assemblies into 30 similarly sized chunks of sequences.
for species in mar meg obs ang jap
do
    if [ ! -f ../data/subjects/${species}.mask.rm.01.fa ]
    then
    START=$(date +%s)
    echo -n "Splitting the ${species} assembly..."
    ../bin/kent/faSplit sequence ../data/subjects/ang${species}.fasta.masked 30 ../data/subjects/${species}masked
    for i in ../data/subjects/${species}masked??.fa
    do
        new_file_name=`echo ${i} | sed "s/${species}masked/${species}.mask.rm./g"`
        mv ${i} ${new_file_name}
    done
    print_time ${START}
    fi
done

# Mask tandem repeats.
START=$(date +%s)
count=0
for i in ../data/subjects/{ang,jap,mar,meg,obs}.mask.rm.??.fa
do
    tmp=`basename ${i%.fa}`
    in_file_id=`echo ${tmp} | sed 's/.mask.rm//g'`
    acct="nn9244k"
    out="../log/wga/trf.${in_file_id}.out"
    new_file_name=`echo ${i} | sed 's/mask.rm/mask.trf/g'`
    rm -f ${out}
    if [ ! -f ${new_file_name} ]
    then
        count=$((count+1))
        echo -ne "\rSubmitting jobs to mask tandem repeats (${count})..."
        sbatch --account ${acct} -o ${out} run_trf.slurm ${i} ${new_file_name} > /dev/null
    fi
    sleep_while_too_busy
done
sleep_while_running
if [ ${count} -gt 0 ]
then
    echo ${count}
    print_time ${START}
fi

# Merge the assembly version in which tandem repeats are masked with the one generated by repeatmasker.
START=$(date +%s)
count=0
for i in ../data/subjects/{ang,jap,mar,meg,obs}.mask.rm.??.fa
do
    tmp=${i%.fa}
    in_file_id=`basename ${tmp} | sed 's/.mask.rm//g'`
    acct="nn9244k"
    out="../log/wga/merge_masks.${in_file_id}.out"
    new_file_name=`echo ${i} | sed 's/mask.rm/mask/g'`
    rm -f ${out}
    if [ ! -f ${new_file_name} ]
    then
        count=$((count+1))
        echo -ne "\rSubmitting jobs to merge masks (${count})..."
        sbatch --account=${acct} -o ${out} merge_assembly_masks.slurm ${i} > /dev/null
    fi
    sleep_while_too_busy
done
sleep_while_running
if [ ${count} -gt 0 ]
then
    echo ${count}
    print_time ${START}
fi

# Extract the longest contigs from the masked ang assembly.
if [ ! -d ../data/subjects/ang_longest ]
then
    mkdir -p ../data/subjects/ang_longest
    START=$(date +%s)
    echo -n "Extracting the longest contigs from ../data/subjects/ang.mask.??.fa"
    for i in ../data/subjects/ang.mask.??.fa
    do
        ruby exclude_long_sequences_from_fasta.rb ${i} 100000 ../data/subjects/ang_longest/ang_
    done
    print_time ${START}
fi

# Run lastz to generate files in lav format.
START=$(date +%s)
mkdir -p ../res/lastz/lav
count=0
for target in ../data/subjects/ang_longest/*.fasta
do
    target_id=`basename ${target%.fasta} | sed 's/ang_//g'`
    for query_species_id in jap mar meg obs
    do
    query_prefix="../data/subjects/${query_species_id}.mask."
    first_query_file=${query_prefix}00.fa
    first_query_id=`basename ${first_query_file%.fa} | sed 's/.mask.//g'`
    lav_prefix="../res/lastz/lav/${target_id}_${first_query_id%00}"
    first_lav_file="../res/lastz/lav/${target_id}_${first_query_id}.lav"
    if [ ! -f ${first_lav_file} ]
    then
        count=$((count+1))
        echo -ne "\rSubmitting jobs to run lastz (${count})..."
        params="\"B=2 C=0 E=150 H=0 K=4500 L=3000 M=254 O=600 Q=../data/parameter_files/human_chimp.v2.q T=2 Y=15000\""
        out="../log/wga/lastz.${target_id}_${query_species_id}.out"
        acct="nn9244k"
        rm -f ${out}
        sbatch --account ${acct} -o ${out} run_lastz.slurm ${target} ${query_prefix} ${params} ${lav_prefix} > /dev/null
        sleep_while_too_busy
    fi
    done
done
sleep_while_running
if [ ${count} -gt 0 ]
then
    print_time ${START}
fi

# Convert lav files to psl format.
START=$(date +%s)
psl_dir=../res/lastz/psl
mkdir -p ${psl_dir}
count=0
for species in jap mar meg obs
do
    for n in `seq -w 0 29`
    do
        ls ../res/lastz/lav/scf*${species}${n}.lav > tmp.lav_list.${species}${n}.txt
        first_psl_file=`ls ../res/lastz/lav/scf*${species}${n}.lav | head -n 1 | sed 's/lav/psl/g'`
            if [ ! -f ${first_psl_file} ]
        then
            count=$((count+1))
            echo -ne "\rSubmitting jobs to convert lav files (${count})..."
            out="../log/wga/convert_lav.${species}${n}.out"
            rm -f ${out}
            sbatch --account nn9244k -o ${out} convert_lav.slurm tmp.lav_list.${species}${n}.txt ${psl_dir} > /dev/null
            sleep_while_too_busy
        fi
    done
done
if [ ${count} -gt 0 ]
then
    echo ${count}
    print_time ${START}
fi
sleep_while_running

# Chain alignments if they are close enough to each other.
START=$(date +%s)
chains_dir=../res/lastz/chains
mkdir -p ${chains_dir}
count=0
for species in jap mar meg obs
do
    for n in `seq -w 0 29`
    do
        ls ../res/lastz/psl/scf*${species}${n}.psl > tmp.psl_list.${species}${n}.txt
        first_chain_file=`ls ../res/lastz/psl/scf*${species}${n}.psl | head -n 1 | sed 's/\.psl/.chain/g' | sed 's/psl/chains/g'`
        if [ ! -f ${first_chain_file} ]
        then
            count=$((count+1))
            echo -ne "\rSubmitting jobs to chain psl files (${count})..."
            out="../log/wga/make_chain.${species}${n}.out"
            rm -f ${out}
            sbatch --account nn9244k -o ${out} make_chain.slurm tmp.psl_list.${species}${n}.txt ${chains_dir} ../data/subjects/ang.2bit ../data/subjects/${species}.2bit > /dev/null
            sleep_while_too_busy
        fi
    done
done
if [ ${count} -gt 0 ]
then
    print_time ${START}
fi
sleep_while_running

# Merge the chains.
home=`pwd`
cd ../res/lastz/chains
for species in jap mar meg obs
do
    merged_chain_file_name="ang_${species}.chain"
    if [ ! -f ${merged_chain_file_name} ]
    then
        START=$(date +%s)
        echo -n "Merging chains for ${species}... "
        out="../log/wga/merg_chain.${species}.out"
        ${home}/../bin/kent/chainMergeSort scf*_${species}??.chain > ${merged_chain_file_name} 2>${home}/${out}
        print_time ${START}
    fi
done
cd -

# Get the linkage-group sizes of all assemblies.
for assembly_file_name in ../data/subjects/ang{ang,jap,mar,meg,obs}.fasta
do
    sizes_file_name=${assembly_file_name%.fasta}.sizes
    if [ ! -f ${sizes_file_name} ]
    then
        START=$(date +%s)
        echo -n "Generating sizes file for assembly ${assembly_file_name}... "
        ../bin/kent/faSize ${assembly_file_name} -detailed > ${sizes_file_name}
        print_time ${START}
    fi
done

# Net chains.
mkdir -p ../res/lastz/nets
for species in jap mar meg obs
do
    chain_file_name="../res/lastz/chains/ang_${species}.chain"
    prenet_chain_file_name="../res/lastz/chains/preNet_ang_${species}.chain"
    net_file_name="../res/lastz/nets/ang_${species}_ms1.net"
    wrong_net_file_name=${net_file_name}_wrong
    synteny_file_name=${net_file_name%.net}_synteny.net
    wrong_synteny_file_name=${synteny_file_name}_wrong
    if [ ! -f ${synteny_file_name} ]
    then
        echo -n "Netting file ${chain_file_name}... "
        START=$(date +%s)
        ../bin/kent/chainPreNet ${chain_file_name} ../data/subjects/angang.sizes ../data/subjects/${species}.sizes ${prenet_chain_file_name}
        ../bin/kent/chainNet -minSpace=1 ${prenet_chain_file_name} ../data/subjects/angang.sizes ../data/subjects/${species}.sizes ${net_file_name} ${wrong_net_file_name}
        ../bin/kent/netSyntenic ${net_file_name} ${synteny_file_name}
        ../bin/kent/netSyntenic ${wrong_net_file_name} ${wrong_synteny_file_name}
        print_time ${START}
    fi
done

# Converting to axt and maf format.
mkdir -p ../res/lastz/pairwise_alignments
for species in jap mar meg obs
do
    net_file_name="../res/lastz/nets/ang_${species}_ms1.net"
    prenet_chain_file_name="../res/lastz/chains/preNet_ang_${species}.chain"
    synteny_file_name=${net_file_name%.net}_synteny.net
    axt_file_name="../res/lastz/pairwise_alignments/ang_${species}_ms1.axt"
    sorted_axt_file_name=${axt_file_name%.axt}_sorted.axt
    maf_file_name=${sorted_axt_file_name%.axt}.maf
    if [ ! -f ${maf_file_name} ]
    then
        echo -n "Converting coastal nets to axt and maf format... "
        START=$(date +%s)
        ../bin/kent/netToAxt ${synteny_file_name} ${prenet_chain_file_name} ../data/subjects/ang.2bit ../data/subjects/${species}.2bit ${axt_file_name}
        ../bin/kent/axtSort ${axt_file_name} ${sorted_axt_file_name}
        ../bin/kent/axtToMaf ${sorted_axt_file_name} ../data/subjects/angang.sizes ../data/subjects/${species}.sizes ${maf_file_name} -tPrefix="ang" -qPrefix="${species}"
        print_time ${START}
    fi
done

# Remove overlapping parts of alignments with single_cov2.
module load multiz-tba/012109
for species in jap mar meg obs
do
    maf_file_name="../res/lastz/pairwise_alignments/ang_${species}_ms1_sorted.maf"
    clean_maf_file_name="../res/lastz/pairwise_alignments/ang_${species}_ms1_sorted_clean.maf"
    if [ ! -f ${clean_maf_file_name} ]
    then
        echo -n "Removing overlapping alignment parts for ${species}... "
         START=$(date +%s)
         single_cov2 ${maf_file_name} > ${clean_maf_file_name}
         print_time ${START}
    fi
done